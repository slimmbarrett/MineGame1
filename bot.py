from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import logging
from typing import Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = '7537994303:AAG15uJYwAmzVINLchNmzIjZ7So95RdkpdI'
CHANNEL_ID = 'cashgeneratorUBT'
CHANNEL_URL = f"https://t.me/{CHANNEL_ID}"
WIN_URL = "https://1wxxlb.com/casino/list?open=register&p=dsgq"
WEB_APP_URL = 'https://mine1win.vercel.app/'

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_language: Dict[int, str] = {}

# –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
messages = {
    'en': {
        'welcome': "Hello [USERNAME]!\nüö©You must subscribe to our Telegram channel to continue!\n\nüîî This will help you not miss any important signals! üöÄ",
        'check_subscription': "Check subscription!",
        'channel': "Channel",
        'not_subscribed': "Please subscribe to our channel to continue!",
        'ref_link': "üéâ Here's the referral link to our partner! üéâ\n\nüö® Important warning!üö®\n\nIf you don't register using this link, the bot may show incorrect results! ‚ö†Ô∏è\n\nDON'T FORGET TO USE PROMO CODE - CashGen üí∏",
        'final_message': "üöÄ MineGames from Cash Generator ‚Äî your chance to test your luck! üí∞\n\nWith our bot you'll get 92% pass rate in MINE game! üéØ Enjoy the game without extra risk and win! üéâ\n\nDon't miss your chance ‚Äî start right now! üí•\n\nCLICK THE 'Mine 92%‚úÖ' BUTTON"
    },
    'ru': {
        'welcome': "–ü—Ä–∏–≤–µ—Ç [USERNAME]!\nüö©–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!\n\nüîî –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞! üöÄ",
        'check_subscription': "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏!",
        'channel': "–ö–∞–Ω–∞–ª",
        'not_subscribed': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!",
        'ref_link': "üéâ –í–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞! üéâ\n\nüö® –í–∞–∂–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!üö®\n\n–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! ‚ö†Ô∏è\n\n–ù–ï –ó–ê–ë–£–î–¨ –£–ö–ê–ó–ê–¢–¨ –ü–†–û–ú–û–ö–û–î - CashGen üí∏",
        'final_message': "üöÄ MineGames –æ—Ç –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ö—ç—à–∞ ‚Äî –≤–∞—à —à–∞–Ω—Å –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É! üí∞\n\n–° –Ω–∞—à–∏–º –±–æ—Ç–æ–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 92% –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤ –∏–≥—Ä–µ MINE! üéØ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏–≥—Ä–æ–π –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ä–∏—Å–∫–∞ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ! üéâ\n\n–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üí•\n\n–ù–ê–ñ–ú–ò –ù–ê –ö–ù–û–ü–ö–£ 'Mine 92%‚úÖ'"
    },
    'hi': {
        'welcome': "‡§®‡§Æ‡§∏‡•ç‡§§‡•á [USERNAME]!\nüö©‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§Æ‡§æ‡§∞‡•á ‡§ü‡•á‡§≤‡•Ä‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§ö‡•à‡§®‡§≤ ‡§ï‡•ã ‡§∏‡§¨‡•ç‡§∏‡§ï‡•ç‡§∞‡§æ‡§á‡§¨ ‡§ï‡§∞‡•á‡§Ç!\n\nüîî ‡§Ø‡§π ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•ã‡§à ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡§ø‡§ó‡•ç‡§®‡§≤ ‡§® ‡§õ‡•Ç‡§ü‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•á‡§ó‡§æ! üöÄ",
        'check_subscription': "‡§∏‡§¶‡§∏‡•ç‡§Ø‡§§‡§æ ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡•á‡§Ç!",
        'channel': "‡§ö‡•à‡§®‡§≤",
        'not_subscribed': "‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§ö‡•à‡§®‡§≤ ‡§ï‡•ã ‡§∏‡§¨‡•ç‡§∏‡§ï‡•ç‡§∞‡§æ‡§á‡§¨ ‡§ï‡§∞‡•á‡§Ç!",
        'ref_link': "üéâ ‡§Ø‡§π‡§æ‡§Å ‡§π‡§Æ‡§æ‡§∞‡•á ‡§™‡§æ‡§∞‡•ç‡§ü‡§®‡§∞ ‡§ï‡§æ ‡§∞‡•á‡§´‡§∞‡§≤ ‡§≤‡§ø‡§Ç‡§ï ‡§π‡•à! üéâ\n\nüö® ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä!üö®\n\n‡§Ö‡§ó‡§∞ ‡§Ü‡§™ ‡§á‡§∏ ‡§≤‡§ø‡§Ç‡§ï ‡§∏‡•á ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§¨‡•â‡§ü ‡§ó‡§≤‡§§ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§¶‡§ø‡§ñ‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à! ‚ö†Ô∏è\n\n‡§™‡•ç‡§∞‡•ã‡§Æ‡•ã ‡§ï‡•ã‡§° ‡§≠‡•Ç‡§≤‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç - CashGen üí∏",
        'final_message': "üöÄ ‡§ï‡•à‡§∂ ‡§ú‡•á‡§®‡§∞‡•á‡§ü‡§∞ ‡§∏‡•á MineGames ‚Äî ‡§Ü‡§™‡§ï‡§æ ‡§≠‡§æ‡§ó‡•ç‡§Ø ‡§Ü‡§ú‡§Æ‡§æ‡§®‡•á ‡§ï‡§æ ‡§Æ‡•å‡§ï‡§æ! üí∞\n\n‡§π‡§Æ‡§æ‡§∞‡•á ‡§¨‡•â‡§ü ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ü‡§™‡§ï‡•ã MINE ‡§ó‡•á‡§Æ ‡§Æ‡•á‡§Ç 92% ‡§™‡§æ‡§∏ ‡§∞‡•á‡§ü ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ! üéØ ‡§¨‡§ø‡§®‡§æ ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§ï‡•á ‡§ó‡•á‡§Æ ‡§ï‡§æ ‡§Ü‡§®‡§Ç‡§¶ ‡§≤‡•á‡§Ç ‡§î‡§∞ ‡§ú‡•Ä‡§§‡•á‡§Ç! üéâ\n\n‡§Æ‡•å‡§ï‡§æ ‡§® ‡§õ‡•ã‡§°‡§º‡•á‡§Ç ‚Äî ‡§Ö‡§≠‡•Ä ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç! üí•\n\n'Mine 92%‚úÖ' ‡§¨‡§ü‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç"
    },
    'pt': {
        'welcome': "Ol√° [USERNAME]!\nüö©Voc√™ deve se inscrever em nosso canal do Telegram para continuar!\n\nüîî Isso ajudar√° voc√™ a n√£o perder nenhum sinal importante! üöÄ",
        'check_subscription': "Verificar inscri√ß√£o!",
        'channel': "Canal",
        'not_subscribed': "Por favor, inscreva-se em nosso canal para continuar!",
        'ref_link': "üéâ Aqui est√° o link de refer√™ncia para nosso parceiro! üéâ\n\nüö® Aviso importante!üö®\n\nSe voc√™ n√£o se registrar usando este link, o bot pode mostrar resultados incorretos! ‚ö†Ô∏è\n\nN√ÉO ESQUE√áA DE USAR O C√ìDIGO PROMOCIONAL - CashGen üí∏",
        'final_message': "üöÄ MineGames do Gerador de Dinheiro ‚Äî sua chance de testar sua sorte! üí∞\n\nCom nosso bot voc√™ ter√° 92% de taxa de aprova√ß√£o no jogo MINE! üéØ Aproveite o jogo sem risco extra e ganhe! üéâ\n\nN√£o perca sua chance ‚Äî comece agora! üí•\n\nCLIQUE NO BOT√ÉO 'Mine 92%‚úÖ'"
    }
}

def get_language_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    keyboard = [
        [
            InlineKeyboardButton("English üá¨üáß", callback_data='lang_en'),
            InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data='lang_ru')
        ],
        [
            InlineKeyboardButton("‡§π‡§ø‡§Ç‡§¶‡•Ä üáÆüá≥", callback_data='lang_hi'),
            InlineKeyboardButton("Portugu√™s üáµüáπ", callback_data='lang_pt')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_subscription_keyboard(lang: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton(messages[lang]['channel'], url=CHANNEL_URL),
            InlineKeyboardButton(messages[lang]['check_subscription'], callback_data='check_sub')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_game_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã"""
    keyboard = [
        [
            InlineKeyboardButton("1WIN", url=WIN_URL),
            InlineKeyboardButton("Mine 92%‚úÖ", web_app=WebAppInfo(url=WEB_APP_URL))
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def check_subscription(bot, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        logger.debug(f"Checking subscription for user {user_id}")
        member = await bot.get_chat_member(chat_id=f"@{CHANNEL_ID}", user_id=user_id)
        logger.debug(f"Member status: {member.status}")
        return member.status in ['member', 'administrator', 'creator', 'restricted']
    except Exception as e:
        logger.error(f"Error checking subscription: {str(e)}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        logger.info(f"Start command received from user {user.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        await update.message.reply_text(
            "üëã Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
            reply_markup=get_language_keyboard()
        )
        logger.info(f"Language keyboard sent to user {user.id}")
        
    except Exception as e:
        logger.error(f"Error in start command: {str(e)}")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="An error occurred. Please try /start again."
            )
        except Exception as retry_error:
            logger.error(f"Failed to send error message: {str(retry_error)}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()  # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        
        user_id = query.from_user.id
        logger.info(f"Button callback from user {user_id}: {query.data}")
        
        if query.data.startswith('lang_'):
            lang = query.data.split('_')[1]
            user_language[user_id] = lang
            welcome_text = messages[lang]['welcome'].replace('[USERNAME]', query.from_user.first_name)
            await query.edit_message_text(text=welcome_text, reply_markup=get_subscription_keyboard(lang))
            logger.info(f"Language {lang} set for user {user_id}")
            
        elif query.data == 'check_sub':
            lang = user_language.get(user_id, 'en')
            is_subscribed = await check_subscription(context.bot, user_id)
            logger.info(f"Subscription check for user {user_id}: {is_subscribed}")
            
            if is_subscribed:
                await query.edit_message_text(text=messages[lang]['ref_link'], reply_markup=get_game_keyboard())
                await context.bot.send_message(chat_id=user_id, text=messages[lang]['final_message'])
                logger.info(f"Game keyboard sent to user {user_id}")
            else:
                await query.answer(messages[lang]['not_subscribed'], show_alert=True)
                logger.info(f"Subscription check failed for user {user_id}")
                
    except Exception as e:
        logger.error(f"Error in button callback: {str(e)}")
        try:
            await query.answer("An error occurred. Please try again.", show_alert=True)
        except:
            pass

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = update.effective_user.id
        logger.debug(f"Received message from user {user_id}: {update.message.text}")
    except Exception as e:
        logger.error(f"Error handling message: {str(e)}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        logger.info("Starting bot application...")
        application = Application.builder().token(BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        logger.info("Adding handlers...")
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(button_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Starting bot polling...")
        application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"Critical error: {str(e)}")
        raise

if __name__ == '__main__':
    main()
